[{"id":"5cce1ca2.78e72c","type":"ibmiot out","z":"2f03fe27.7d966a","authentication":"boundService","apiKey":"","outputType":"evt","deviceId":"IoTDevice","deviceType":"IoT-DemoDevice","eventCommandType":"update","format":"json","data":"all","qos":"","name":"Send to IBM IoT Platform","service":"registered","x":555,"y":183,"wires":[]},{"id":"157fd052.bf344","type":"inject","z":"2f03fe27.7d966a","name":"Send Data","topic":"","payload":"true","payloadType":"bool","repeat":"","crontab":"","once":false,"x":85,"y":187,"wires":[["e6eeb37b.13c06"]]},{"id":"e6eeb37b.13c06","type":"function","z":"2f03fe27.7d966a","name":"Device payload","func":"// Array of pseudo random temperatures\nvar humidity1 = [15,17,15,17,15,17,15,17,18.5,20,21.5,33,44,52.2,21.5,15,17,15,17,15,17,15,17,18.5,20,21.5,33,44,52.2,21.5,33,44,52.2,33,44,52.2,89,98];\n// Array of pseudo random relative humidities\nvar temp1 = [20,21,21.5,20,29,28,29,31,29,32,28,34,20,21,21.5,20,29,28,29,31,29,32,28,34,20,21,21.5,20,29,28,29,31,29,32,28,34,50,55,49,45,47];\n//Array for Rotation Speed\nvar speed1 = [1000, 2200, 2200, 2200, 2200, 2200, 2200, 2200, 2300, 2300, 2300, 2300, 2300, 2300, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2900, 2900, 2900, 2900, 2900, 2900, 2900, 2900, 3200, 4000, 2200, 3200, 4000, 5000, 3660, 3670, 3680, 3690, 4000];\n\n// Counter to select from array.\nvar counter1 = context.get('counter1')||0;\n/*\ncounter1 = counter1+1;\nif(counter1 > 9) counter1 = 0;\n*/\nidxHumidity = Math.floor(Math.random() * (humidity1.length - 1)+1);\nidxTemp = Math.floor(Math.random() * (temp1.length - 1)+1);\nidxSpeed = Math.floor(Math.random() * (speed1.length - 1)+1);\ncounter1 = Math.floor(Math.random() * (10-1)+1);\ncontext.set('counter1',counter1+1);\n\n// Create MQTT message in JSON\nmsg = {\n  payload: JSON.stringify(\n    {\n      d: {\n        \"humidity\" : humidity1[idxHumidity],\n        \"temp\" : temp1[idxTemp],\n        \"speed\" : speed1[idxSpeed]\n         }\n      }\n  )\n};\n\n/*\nvar temperature = Math.floor(Math.random() * (200-1) + 1);\nvar humidity = Math.floor(Math.random() * (100-1) + 1);\nvar speed = Math.floor(Math.random() * (5000-1) + 1);\n\nvar holdTemp = context.get('holdTemp')||20;\nvar holdHumidity = context.get('holdHumidity')||20;\nvar holdSpeed = context.get('holdSpeed')||4000;\n\n// Randomize the Temperature\nif(holdTemp === 20){\n    holdTemp = temperature;\n} else if ((temperature >= (holdTemp * 0.85)) && (temperature <= (holdTemp * 1.15))) {\n    holdTemp = temperature;\n}\ncontext.set('holdTemp',holdTemp);\n\n// Randomize the Humidity\nif(holdHumidity === 20){\n    holdHumidity = humidity;\n} else if ((humidity >= (holdHumidity * 0.8)) && (humidity <= (holdHumidity * 1.2))) {\n    holdHumidity = humidity;\n}\ncontext.set('holdHumidity',holdHumidity);\n\n\n// Randomize the Humidity\nif(holdSpeed === 4000){\n    holdSpeed = speed;\n} else if ((humidity >= (speed * 0.7)) && (humidity <= (speed * 1.3))) {\n    holdSpeed = speed;\n}\ncontext.set('holdSpeed',holdSpeed);\n\n// Create MQTT message in JSON\nmsg = {\n  payload: JSON.stringify(\n    {\n        \"temperature\" : holdTemp,\n        \"humidity\" : holdHumidity,\n        \"speed\" : holdSpeed,\n    }\n  )\n};\n\n*/\nreturn msg;\n","outputs":1,"noerr":0,"x":305,"y":187,"wires":[["5cce1ca2.78e72c","b8e749f2.2b856"]]},{"id":"b8e749f2.2b856","type":"debug","z":"2f03fe27.7d966a","name":"Debug output payload","active":true,"console":"false","complete":"payload","x":545,"y":247,"wires":[]},{"id":"8489be43.967fb","type":"comment","z":"2f03fe27.7d966a","name":"Device Simulator","info":"Sends simulated device sensor data to IBM Watson IoT Plaform.\n\nCan be configured to send on click or on an automatic interval.\n\n\n#Prerequisite\nOutput node device type and device ID need to match a device that it registered in a running IBM Watson IoT Platform service.\n\n# Watson IoT Platform docs\n[Connecting devices](https://www.bluemix.net/docs/services/IoT/iotplatform_task.html)","x":85,"y":107,"wires":[]},{"id":"c37a861f.0f6f2","type":"comment","z":"2f03fe27.7d966a","name":"1. Configure target","info":"","x":535,"y":147,"wires":[]},{"id":"20c48a5e.d991b6","type":"comment","z":"2f03fe27.7d966a","name":"2. Click to send data","info":"To automatically send data:\n1. Change *Repeat* to interval.\n2. Click Deploy button.\n","x":95,"y":227,"wires":[]},{"id":"8d48af33.c6e96","type":"ibmiot in","z":"2f03fe27.7d966a","authentication":"boundService","apiKey":"e0c7004f.80d1d8","inputType":"evt","deviceId":"IoTDevice","applicationId":"","deviceType":"+","eventType":"+","commandType":"","format":"json","name":"IBM IoT","service":"registered","allDevices":false,"allApplications":"","allDeviceTypes":true,"allEvents":true,"allCommands":"","allFormats":"","qos":"0","x":95,"y":486,"wires":[["3dfe234b.a0a2e4","c0e6e608.f4fa4","dc937b50.82c46"]]},{"id":"3dfe234b.a0a2e4","type":"function","z":"2f03fe27.7d966a","name":"Temp Payload","func":"return {payload:msg.payload.d.temp};","outputs":1,"noerr":0,"x":293,"y":579,"wires":[["c7fdca22.e47688","2eb8bba6.766e9c"]]},{"id":"c7fdca22.e47688","type":"ui_gauge","z":"2f03fe27.7d966a","name":"Temp Gauge","group":"3abbc133.7128e6","order":1,"width":"0","height":"0","gtype":"gage","title":"Temp Level","label":"%C","format":"{{value}}","min":"0","max":"100","colors":["#00b500","#e6e600","#ca3838"],"x":589,"y":529,"wires":[]},{"id":"76574fbf.8b391","type":"ui_gauge","z":"2f03fe27.7d966a","name":"Humidity Gauge","group":"a69b4a1c.82278","order":1,"width":"0","height":"0","gtype":"donut","title":"Humidity Level","label":"%","format":"{{value}}","min":"0","max":"100","colors":["#00b500","#e6e600","#ca3838"],"x":585,"y":325,"wires":[]},{"id":"c0e6e608.f4fa4","type":"function","z":"2f03fe27.7d966a","name":"Humidity payload","func":"return {payload:msg.payload.d.humidity};","outputs":1,"noerr":0,"x":305,"y":404,"wires":[["76574fbf.8b391","e8aa0d57.9b7148"]]},{"id":"e8aa0d57.9b7148","type":"ui_chart","z":"2f03fe27.7d966a","name":"Humidity Chart","group":"a69b4a1c.82278","order":1,"width":0,"height":0,"label":"Humidity Level","chartType":"line","legend":"false","xformat":"%H:%M:%S","interpolate":"linear","nodata":"","ymin":"0","ymax":"100","removeOlder":1,"removeOlderUnit":"60","x":591,"y":440,"wires":[[],[]]},{"id":"2eb8bba6.766e9c","type":"ui_chart","z":"2f03fe27.7d966a","name":"Temp Chart","group":"3abbc133.7128e6","order":2,"width":0,"height":0,"label":"Temp Level","chartType":"line","legend":"false","xformat":"%H:%M:%S","interpolate":"linear","nodata":"","ymin":"20","ymax":"60","removeOlder":1,"removeOlderUnit":"60","x":584,"y":632,"wires":[[],[]]},{"id":"dc937b50.82c46","type":"function","z":"2f03fe27.7d966a","name":"Speed Payload","func":"return {payload:msg.payload.d.speed};","outputs":1,"noerr":0,"x":305,"y":725,"wires":[["9dac7514.7b6bc","96b77019.967438"]]},{"id":"9dac7514.7b6bc","type":"ui_gauge","z":"2f03fe27.7d966a","name":"Speed Gauge","group":"82fccd66.6d151","order":0,"width":0,"height":0,"gtype":"wave","title":"Speed","label":"Kms","format":"{{value}}","min":"1000","max":"5000","colors":["#00b500","#e6e600","#ca3838"],"x":584,"y":699.5,"wires":[]},{"id":"96b77019.967438","type":"ui_chart","z":"2f03fe27.7d966a","name":"Speed Chart","group":"82fccd66.6d151","order":0,"width":0,"height":0,"label":"Speed","chartType":"line","legend":"false","xformat":"%H:%M:%S","interpolate":"linear","nodata":"","ymin":"1000","ymax":"5000","removeOlder":1,"removeOlderUnit":"60","x":567,"y":799.5,"wires":[[],[]]},{"id":"e0c7004f.80d1d8","type":"ibmiot","z":"2f03fe27.7d966a","name":""}]